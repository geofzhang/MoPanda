{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MoPAnDA","text":"<p>Modular Petrophysical Analysis and Data Analysis Tool</p>"},{"location":"#what-is-mopanda","title":"What is MoPAnDA?","text":"<p>MoPAnDA is a petrophysics with python software built with graphyical user interface (GUI), allowing scientific python computing of conventional and unconventional formation evaluation.  Much of its modules are designed to be a complimentary scoping tool for CCUS/CCS projects.</p> <p>MoPAnDA can achieve following functions through GUI:</p> <ul> <li>Load and output data from <code>.las</code>, <code>.dlis</code>, <code>.xlsx</code>, <code>.csv</code> files.</li> <li>Editing and displaying logs in realtime.</li> <li>Data imputation and explorative analysis.</li> <li>Superwised and unsupervised prediction of missing logs and electrofacies.</li> <li>Petrophysical workflow. </li> </ul>"},{"location":"#on-the-shoulders-of-giants","title":"On the Shoulders of Giants","text":"<p>This project is based on multiple opensource packages:</p> <ul> <li>lasio: .LAS file reading and writing. lasio_ also provides standard output data structure across many petrophysical data processing softwares (welly, PetroPy...)</li> <li>PetroPy: Foundation of this project but sadly it's no longer updated and supported. MoPanda harvests the reservoir fluid property and multimineral model functions from PetroPy.</li> <li>PfEFFER by KGS: PfEFFER is part of the KGS GEMINI project (currently finished development with no technical support) which created a complex petrophysical and geological processing software based on Java. However, it was talored to the complete and well-maintained database KGS has, thus lacking flexibility.</li> </ul>"},{"location":"install_mopanda/","title":"Installation","text":"<p>MoPAnDA is a Python-based tool which means it is relying on the Python programming language, developing environment, and its dependencies. Therefore, Python is required to be able to use or develop the script version of MoPAnDA.</p> <p>Make sure you are Pythoned!</p> <p>If you have not yet installed Python in your system, or you don't have prior experience with Python, we recommend followiing Python Setup section and install Anaconda or Miniconda accordingly.</p> <p>There are currently two ways of having MoPAnDA in your computer (only for Windows users currently):</p> <ul> <li>Installing via GitHub</li> <li>Downloading excutive software</li> </ul>"},{"location":"install_mopanda/#with-github-recommended","title":"with GitHub recommended","text":"<p>MoPAnDA can be directly used from GitHub by directly downloading the whole repository or cloning the repository which might be useful if you want to use the very latest version:</p> Download from GitHubClone with Git <p> On GitHub.com, navigate to the MoPAnDA GitHub main page.</p> <p> Above the list of files, click  Code.</p> <p> In the dropdown list, click  Download ZIP.</p> <p> Make sure you have Git installed.</p> <p> Open <code>Git Bash</code>.</p> <p> Change the current working directory to the location where you want the cloned directory.</p> <p> Type following command into <code>Git Bash</code>:</p> <pre><code>git clone https://github.com/geofzhang/MoPanda.git\n</code></pre>"},{"location":"install_mopanda/#with-excutable","title":"with Excutable","text":"<p>Excutable version of MoPAnDA can be downloaded from the Release page of the MoPAnDA project.</p> <p>Warning</p> <p>Note that the excutable version of MoPAnDA bundles some actively-developing open-source packages, which will introduce unknown and unpredictable errores as MoPAnDA has not been extensively tested with data outside of authors' domain.</p> <p>Using the distibuted source code is recommanded.</p>"},{"location":"python-setup/","title":"Python Setup","text":"<p>Python is one of the world\u2019s most used and most popular programming languages. It\u2019s powerful, versatile, and easy to learn. If you are not familiar with Python, we recommend beginning with the official Python Beginner's Guide to Python.</p> <p>Python can be installed from the Python Software Foundation website at python.org or via a third party Python distribution such as Conda installers (Miniconda or Anaconda)</p> <p>Due to the fact that MoPAnDA relying on over 100s open-source packages, it is recommanded using Conda to better manage packages and dependencies.</p>"},{"location":"python-setup/#what-is-conda","title":"What is Conda?","text":"<p>Conda is a package, dependency, and environment management system. It provides an easy way of installing, updating, and removing packages and handling dependencies. In its default configuration, conda installs packages from the Official Conda repository instead of the standard language-specific repositories.</p>"},{"location":"python-setup/#anaconda-or-miniconda","title":"Anaconda or Miniconda","text":"<p>Anaconda, a free, open-source, high-performance, and optimized Python and R distribution. Anaconda includes conda, conda-build, Python, and 250+ automatically installed, open-source scientific packages and their dependencies.</p> <p>Miniconda, a mini version of Anaconda that includes only conda and its dependencies.</p> <p>Installing Anaconda is more intuitive and easier for beginners; therefore, we only introduce the installation of Python via Anaconda. One can always follow the Installing Miniconda guide to install Miniconda instead of Anaconda.</p>"},{"location":"python-setup/#install-python-with-anaconda","title":"Install Python with Anaconda","text":"<p> Go to the Official Conda repository.</p> <p> Click View All Installers under Anaconda Installers.</p> <p></p> <p> Download the latest version of Anaconda suitable for your operation system.</p> Which file should I download? <p>For most Windows users, you will be looking at an .exe file as follow:</p> <p></p> <p>If you would like to install Anaconda in Windows Subsystem of Linux (WSL 2), download the <code>.Linux-x86_64</code> version and follow this instruction.</p> <p> Run the downloaded installer, click Next or I Agree with default settings unless you know what you are doing.</p> <p>When and how should I change installation settings?</p> <ul> <li> <p>Only install for <code>\"All Users\"</code> when you have admin privileges and:</p> <ul> <li>are required to do so, or</li> <li>want to change <code>Destination Folder</code> outside of your current <code>User</code> folder.</li> </ul> </li> <li> <p>Be extra cautious of <code>Advanced Installation Options</code>, change settings might lead to a failed enviroment initiation and reinstallation of Anaconda.</p> <p>Change PATH</p> <p>Only check the <code>\"Add Anaconda3 to my PATH environment variable\"</code> box if this is your first time installing Python and are not plannned to install any Python distribution in the future.</p> <p></p> </li> </ul>"},{"location":"python-setup/#check-installation-of-python","title":"Check installation of Python","text":"<p> Go to Start Menu and type \u201cAnaconda Prompt\u201d to open it.</p> <p> Type the following command and hit the Enter key:</p> <pre><code>python --version\n</code></pre> <p> If nothing happens, you don\u2019t have Python installed. Otherwise, you will get this result:</p> <p><pre><code>Python 3.10.13\n</code></pre>  (Optional) Check Conda installation using: <pre><code>conda --version\n</code></pre></p>"},{"location":"python-setup/#set-up-vitual-environment","title":"Set up Vitual Environment","text":"Why do we need to set up a virtual environment? <p>Like many other languages Python requires a different version for different kind of applications. The application needs to run on a specific version of the language because it requires a certain dependency that is present in older versions but changes in newer versions. Virtual environments makes it easy to ideally separate different applications and avoid problems with different dependencies. </p> <p>Different packages might require the same dependency of different versions or different dependencies that are conflicting with each other. Using virtual environment we can switch between both applications easily and get them running without the risk of contaminating the base environment.</p> via Command Linevia Anaconda Navigator <p>Universal way of setting up environment for both Anaconda and Miniconda:</p> <p> Go to Start Menu and type \u201cAnaconda Prompt\u201d to open it.</p> <p> Update the conda environment: <pre><code>conda update conda\n</code></pre>  Create the environment: <pre><code>conda create -n mopanda python=3.11\n</code></pre></p> <ul> <li>Replace the \"mopanda\" with your preferred name of the environment. Make it short as it will be typed multiple times.</li> <li>Replace the \"3.11\" with your desired python version if you have a specific version you want to install. Otherwise, \"python=x.x\" can be omitted.</li> </ul> <p> Activate the environment: <pre><code>conda activate mopanda\n</code></pre>  Deactivate the environment: <pre><code>conda deactivate\n</code></pre>  Delete the environment: <pre><code>conda remove -n mopanda --all\n</code></pre></p> <p>Anaconda Navigator is the default GUI of Anaconda. You should be able to find it in the Start Menu.</p> <p> Go to Start Menu and type \u201cAnaconda Navigator\u201d to open it.</p> <p> Click the  button in the leftmost navigation panel.</p> <p> Click the  button at the bottom of the environments panel.</p> <p> Create the environment with name and Python version:</p> <p></p> <p> Click the \"mopanda\" environment in the environments panel to activate.</p> <p>Always remember to activate environment</p> <p>Everytime you reopen Anaconda or a Prompt, you will need to activate the desired environment. </p> <p>You can check your environment through \u201cAnaconda Prompt\u201d to see if it's your desired environmentL:  instead of <code>(base)</code>.</p>"},{"location":"python-setup/#optional-set-up-path-environment-variables","title":"(Optional) Set up PATH environment variables","text":"<p>If you would like to use Windows Command Prompt instead of Anaconda Prompt to access Python, you would need to set up the PATH environment varaibles for Anaconda.</p> <p>Here is a tutorial you can follow:</p> <p> How to set up PATH Environments in Windows for Python</p>"},{"location":"python-setup/#set-up-ide","title":"Set up IDE","text":"<p>An IDE is an integrated development environment, which is a software application that helps programmers create code. You can write, test, and execute your code in an IDE without switching between different tools. </p> <p>Here are some popular IDEs for Python developers:</p> <ul> <li> <p>PyCharm: A powerful and feature-rich IDE that offers intelligent code assistance, debugging, testing, and web development tools.</p> </li> <li> <p>Visual Studio Code: A lightweight and extensible editor that supports many languages, including Python. </p> </li> <li> <p>Jupyter Notebook: A web-based IDE that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. It is mainly used for data analysis, scientific computing, and machine learning.</p> </li> <li> <p>Spyder: An IDE for scientific computing that features a multi-language editor, interactive console, documentation viewer, and variable explorer.</p> </li> </ul> <p>Note that even though Jupyter Notebook and Spyder are included in the Anaconda Navigator, there are some disadvantages that prevent them from being the major IDEs for advanced projects. Here we recommend installing and using PyCharm instead.</p> <p> Download and install the PyCharm Community Edition.</p> <p> Open the PyCharm and create or load a new project.</p> <p> If creating a new project, set up the interpreter by selecting <code>Previously configured interpreter</code> and Click <code>Add Interpreter</code>.</p> <p></p> <p>No previously configured interpreter?</p> <p>It is common to have no previously configured interpreter as PyCharm has not yet connected with Conda yet.</p> <p>Click <code>Conda Based</code> and find your Conda Executable: <pre><code>C:\\Users\\&lt;YOUR USER NAME&gt;\\AppData\\Local\\anaconda3\\Scripts\\conda.exe\n</code></pre></p> <p> Click <code>Add Local Interpreter</code> and Select <code>Conda Environment</code> -&gt; <code>Using existing environment</code></p> <p></p> <p> Or if you loaded an existing project. In the Setting, find the <code>Project: xxx</code> -&gt; <code>Python Interpreter</code> -&gt; <code>Add Interpreter</code> and then repeat step .</p>"},{"location":"scraper/","title":"Scraper","text":""}]}